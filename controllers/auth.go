package controllers

import (
	"apiBackEnd/models"
	"apiBackEnd/utils"
	"log"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// AuthMiddleware valida o token JWT nas rotas protegidas.
// Esta fun칞칚o agora reside em controllers/auth.go
func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		tokenString := c.GetHeader("Authorization")
		if tokenString == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"erro": "Token n칚o fornecido"})
			c.Abort()
			return
		}

		claims, _, err := utils.ValidateToken(tokenString)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"erro": "Token inv치lido ou expirado"})
			c.Abort()
			return
		}

		if claims != nil {
			c.Set("claims", claims)
			if memberID, ok := claims["member_id"].(float64); ok {
				c.Set("member_id", int(memberID))
			}
			if username, ok := claims["username"].(string); ok {
				c.Set("username", username)
			}
		}

		c.Next()
	}
}

type LoginRequest struct {
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
}

// Estrutura de resposta do login para o Swagger
type LoginResponse struct {
	Token         string  `json:"token"`
	MemberGroupID int     `json:"member_group_id"`
	Credits       float64 `json:"credits"`
	Status        int     `json:"status"`
	MemberID      int     `json:"member_id"`
}

// Login realiza a autentica칞칚o do usu치rio.
//
// @Summary Autentica칞칚o de Usu치rio
// @Description Autentica um usu치rio e retorna um token JWT se as credenciais forem v치lidas.
// @Tags Autentica칞칚o
// @Accept  json
// @Produce  json
// @Param login body LoginRequest true "Credenciais de login"
// @Success 200 {object} LoginResponse "Login realizado com sucesso"
// @Failure 400 {object} map[string]string "Erro na requisi칞칚o"
// @Failure 401 {object} map[string]string "Credenciais inv치lidas"
// @Router /login [post]
func Login(c *gin.Context) {
	var req LoginRequest
	log.Println("INFO: Iniciando requisi칞칚o de login") // Log adicionado

	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("ERRO: Dados de login inv치lidos: %v", err) // Log adicionado
		c.JSON(http.StatusBadRequest, gin.H{"erro": "Dados inv치lidos"})
		return
	}
	log.Printf("INFO: Tentativa de login para o usu치rio: %s", req.Username) // Log adicionado

	user, err := models.GetUserByUsername(req.Username)
	if err != nil {
		log.Printf("ERRO: Usu치rio '%s' n칚o encontrado ou erro ao buscar: %v", req.Username, err) // Log adicionado
		c.JSON(http.StatusUnauthorized, gin.H{"erro": "Usu치rio ou senha incorretos"})
		return
	}
	log.Printf("INFO: Usu치rio '%s' encontrado. Status: %d, MemberID: %d", user.Username, user.Status, user.MemberID) // Log adicionado

	// **游늷 Bloquear se a conta n칚o estiver ativa**
	if user.Status != 1 {
		log.Printf("AVISO: Tentativa de login para usu치rio '%s' com conta bloqueada (Status: %d)", user.Username, user.Status) // Log adicionado
		c.JSON(http.StatusUnauthorized, gin.H{"erro": "Conta bloqueada. Entre em contato com o suporte."})
		return
	}

	hashedInputPassword, err := utils.CryptPassword(req.Password)
	if err != nil {
		log.Printf("ERRO: Falha ao gerar hash da senha para o usu치rio '%s': %v", req.Username, err) // Log adicionado
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao processar senha"})
		return
	}

	if hashedInputPassword != user.PasswordHash {
		log.Printf("AVISO: Senha incorreta para o usu치rio '%s'", req.Username) // Log adicionado
		c.JSON(http.StatusUnauthorized, gin.H{"erro": "Usu치rio ou senha incorretos"})
		return
	}

	log.Printf("INFO: Credenciais v치lidas para o usu치rio '%s'. Gerando token...", user.Username) // Log adicionado
	// 游늷 Gerar token com tempo de expira칞칚o configur치vel
	token, err := utils.GenerateToken(user.Username, user.MemberID, user.Credits, strconv.Itoa(user.Status))
	if err != nil {
		log.Printf("ERRO: Falha ao gerar token para o usu치rio '%s': %v", user.Username, err) // Log adicionado
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao gerar token"})
		return
	}
	log.Printf("INFO: Token gerado com sucesso para o usu치rio '%s': %s", user.Username, token) // Log adicionado

	// 游늷 Retornar os dados do usu치rio no login
	c.JSON(http.StatusOK, LoginResponse{
		Token:         token,
		MemberGroupID: user.MemberGroupID,
		Credits:       user.Credits,
		Status:        user.Status,
		MemberID:      user.MemberID,
	})
}
