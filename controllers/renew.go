package controllers

import (
	"apiBackEnd/config"
	"apiBackEnd/utils"
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
)

// Estrutura para receber a requisi√ß√£o de renova√ß√£o
type RenewRequest struct {
	IDCliente              int `json:"id_cliente"`
	QuantidadeRenovacaoMes int `json:"quantidade_renovacao_em_meses"`
}

// RenewAccount renova a conta de um cliente.
//
// @Summary Renovar Conta
// @Description Atualiza a data de expira√ß√£o da conta com base no tempo selecionado.
// @Tags Renova√ß√£o
// @Security BearerAuth
// @Accept  json
// @Produce  json
// @Param renew body controllers.RenewRequest true "Dados para renova√ß√£o"
// @Success 200 {object} map[string]interface{} "Conta renovada com sucesso"
// @Failure 400 {object} map[string]string "Erro na requisi√ß√£o"
// @Failure 401 {object} map[string]string "Token inv√°lido"
// @Failure 402 {object} map[string]string "Cr√©ditos insuficientes"
// @Router /api/renew [post]
func RenewAccount(c *gin.Context) {
	// üîπ 1Ô∏è‚É£ Autentica√ß√£o e valida√ß√£o do token
	tokenString := c.GetHeader("Authorization")
	if tokenString == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"erro": "Token n√£o fornecido"})
		return
	}

	claims, err := utils.ValidateToken(tokenString)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"erro": "Token inv√°lido"})
		return
	}

	memberIDFloat, exists := claims["member_id"].(float64)
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"erro": "MemberID n√£o encontrado no token"})
		return
	}
	memberID := int(memberIDFloat)

	log.Printf("üîç MemberID extra√≠do do token: %d\n", memberID)

	// üîπ 2Ô∏è‚É£ Ler o corpo da requisi√ß√£o
	var req RenewRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"erro": "Dados inv√°lidos"})
		return
	}

	// üîπ 3Ô∏è‚É£ Validar se o cliente pertence ao `member_id`
	var userID, userMemberID, maxConnections int
	var currentExpDate sql.NullInt64 // Agora armazenamos como timestamp Unix

	query := `
		SELECT id, member_id, exp_date, max_connections
		FROM streamcreed_db.users
		WHERE id = ? AND member_id = ?
	`
	log.Printf("üîç Executando query para buscar cliente: %s\n", query)
	err = config.DB.QueryRow(query, req.IDCliente, memberID).Scan(&userID, &userMemberID, &currentExpDate, &maxConnections)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("‚ùå Nenhum cliente encontrado para o ID %d e MemberID %d\n", req.IDCliente, memberID)
			c.JSON(http.StatusUnauthorized, gin.H{"erro": "Cliente n√£o pertence a este MemberID"})
			return
		}
		log.Printf("‚ùå Erro ao buscar cliente: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao buscar cliente"})
		return
	}

	// üîπ 4Ô∏è‚É£ Validar cr√©ditos do `member_id`
	var creditosDisponiveis int
	creditQuery := "SELECT credits FROM streamcreed_db.reg_users WHERE id = ?"
	log.Printf("üîç Executando query para buscar cr√©ditos: %s | Param: %d\n", creditQuery, memberID)

	err = config.DB.QueryRow(creditQuery, memberID).Scan(&creditosDisponiveis)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("‚ö†Ô∏è Nenhum cr√©dito encontrado para MemberID %d. Definindo como 0.\n", memberID)
			creditosDisponiveis = 0
		} else {
			log.Printf("‚ùå Erro ao buscar cr√©ditos do MemberID %d: %v", memberID, err)
			c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao buscar cr√©ditos"})
			return
		}
	}

	log.Printf("‚úÖ Cr√©ditos dispon√≠veis para MemberID %d: %d\n", memberID, creditosDisponiveis)

	// üîπ 5Ô∏è‚É£ Buscar o custo por per√≠odo nas vari√°veis de ambiente
	var custoPorPeriodo int
	var diasRenovacao int

	switch req.QuantidadeRenovacaoMes {
	case 1:
		custoPorPeriodo, _ = strconv.Atoi(os.Getenv("CREDITO_1_MES"))
		diasRenovacao = 31
	case 3:
		custoPorPeriodo, _ = strconv.Atoi(os.Getenv("CREDITO_3_MESES"))
		diasRenovacao = 93
	case 6:
		custoPorPeriodo, _ = strconv.Atoi(os.Getenv("CREDITO_6_MESES"))
		diasRenovacao = 186
	case 12:
		custoPorPeriodo, _ = strconv.Atoi(os.Getenv("CREDITO_12_MESES"))
		diasRenovacao = 365
	default:
		c.JSON(http.StatusBadRequest, gin.H{"erro": "Quantidade de meses inv√°lida"})
		return
	}

	if custoPorPeriodo == 0 {
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Configura√ß√£o de cr√©ditos n√£o encontrada"})
		return
	}

	// üîπ 6Ô∏è‚É£ Calcular o custo total considerando `max_connections`
	custoTotal := custoPorPeriodo * maxConnections
	log.Printf("üí∞ Custo total para renova√ß√£o (considerando conex√µes): %d cr√©ditos\n", custoTotal)

	if creditosDisponiveis < custoTotal {
		c.JSON(http.StatusPaymentRequired, gin.H{
			"erro":                 "Cr√©ditos insuficientes para renova√ß√£o",
			"creditos_disponiveis": creditosDisponiveis,
			"creditos_necessarios": custoTotal,
			"mensagem": fmt.Sprintf(
				"Voc√™ tem %d cr√©ditos, mas para essa renova√ß√£o s√£o necess√°rios %d cr√©ditos. Fa√ßa uma recarga e tente novamente.",
				creditosDisponiveis, custoTotal),
		})
		return
	}

	// üîπ 7Ô∏è‚É£ Criar transa√ß√£o para garantir consist√™ncia
	tx, err := config.DB.Begin()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao iniciar transa√ß√£o"})
		return
	}

	// üîπ 8Ô∏è‚É£ Calcular a nova `exp_date` em `epoch`, ajustando para sempre ser √†s 23h00 no timezone correto
	now := time.Now().Unix()
	var newExpDate time.Time

	if currentExpDate.Valid && currentExpDate.Int64 >= now {
		// üî• Se a data de expira√ß√£o ainda for v√°lida, soma os dias a partir dela
		newExpDate = time.Unix(currentExpDate.Int64, 0).AddDate(0, 0, diasRenovacao)
	} else {
		// üî• Se j√° venceu, come√ßa a contar a partir de agora
		newExpDate = time.Now().AddDate(0, 0, diasRenovacao)
	}

	// üî• Definir o hor√°rio fixo para 23h00 no timezone local do servidor
	location, _ := time.LoadLocation("America/Sao_Paulo") // üî• Ajuste para o fuso correto, se necess√°rio
	newExpDate = time.Date(newExpDate.Year(), newExpDate.Month(), newExpDate.Day(), 23, 0, 0, 0, location)

	// Converter para Unix Timestamp (epoch)
	newExpDateEpoch := newExpDate.Unix()

	log.Printf("‚è≥ Nova expira√ß√£o em UNIX Timestamp (23h00 hor√°rio correto): %d\n", newExpDateEpoch)

	// üîπ 9Ô∏è‚É£ Atualizar `exp_date` no banco dentro da transa√ß√£o
	_, err = tx.Exec("UPDATE streamcreed_db.users SET exp_date = ?, is_trial = '0' WHERE id = ?", newExpDateEpoch, userID)
	if err != nil {
		tx.Rollback()
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao atualizar data de expira√ß√£o"})
		return
	}

	// üîπ üîü Debitar cr√©ditos dentro da transa√ß√£o
	_, err = tx.Exec("UPDATE streamcreed_db.reg_users SET credits = credits - ? WHERE id = ?", custoTotal, memberID)
	if err != nil {
		tx.Rollback()
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao debitar cr√©ditos"})
		return
	}

	// üîπ ‚úÖ Confirmar transa√ß√£o
	err = tx.Commit()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"erro": "Erro ao confirmar renova√ß√£o"})
		return
	}

	// üîπ üî• Retorno de sucesso
	c.JSON(http.StatusOK, gin.H{
		"status":             "Renova√ß√£o conclu√≠da com sucesso",
		"id_cliente":         userID,
		"novo_exp_date":      newExpDateEpoch, // ‚úÖ Agora est√° em epoch
		"creditos_gastos":    custoTotal,
		"creditos_restantes": creditosDisponiveis - custoTotal,
	})
}
